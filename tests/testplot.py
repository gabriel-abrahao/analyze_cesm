import numpy as np
import xarray as xr
import pandas as pd
import scipy.stats
import Ngl
import matplotlib.pyplot as plt
# from mpl_toolkits.basemap import Basemap
import cartopy.crs as ccrs
from cartopy.io.shapereader import Reader
from cartopy.feature import ShapelyFeature
import cftime
import os
import re
import copy

def main():
    maindir = 'input/allmon/'
    inpfsuf = "allmon.nc"
    # p1suf = 'mon_avg_2013_2031.nc'
    # p2suf = 'mon_avg_2032_2050.nc'
    # inpfname = "input/ymonmeans/rcp2.6_seg_005/all_mon.nc"

    inpvname = "TREFHT"

    shpfname = "/home/gabriel/shapefiles/estados_2010.shp"

    pdffname = "test.pdf"

    maxlat = 5.0
    minlat = -33.0
    maxlon = 326.0
    minlon = 280.0

    # Periods for the t-test
    p1years = (2013,2031)
    p2years = (2032,2050)

    allinp = xr.open_dataset("input/temp_allinp.nc")
    allinp = allinp[[i for i in allinp.data_vars.variables][0]]

    allp1 = allinp.sel(year = slice(*p1years))
    allp2 = allinp.sel(year = slice(*p2years))

    # We have to mess up the metadata
    # allp2.coords['year'] = allp1.coords['year']
    anom = allp2.mean('year') - allp1.mean('year')

    anom = allp2 - allp1

    # test_year = scipy.stats.ttest_ind(allp2,allp1,axis = allp1.dims.index('year'))
    test_year_ens = ttest(allp2,allp1,dims = ['year','ensemble'])
    test_year_ens


    # xr.plot.imshow(test_year_ens['statistic'].isel(month = 0,scenario = 0))
    # xr.plot.imshow(test_year_ens['diff'].isel(month = 0,scenario = 0))

    # fig = plt.figure()
    # fc = xr.plot.imshow(test_year_ens['diff'],row = 'month',col = 'scenario')
    # fc = xr.plot.imshow(test_year_ens['diff'].isel(month = [0,1], scenario = [0,1]),row = 'month',col = 'scenario')
    #
    #
    # # xr.plot.contourf(test_year_ens['diff'].isel(month = 0, scenario = 0),ax=ax,levels = [0,0.05,2],hatches=['','.'],alpha = 0)
    # for ax in fc.axes.flat:
    #     # ax.set_title('teste')
    #     xr.plot.contourf(test_year_ens['diff'].isel(month = 0, scenario = 0),ax=ax,levels = [0,0.05,2],hatches=['///','...',''],alpha = 0)
    #
    # ax = fc.axes.flat[0]
    # print(dir(ax))
    # print(plt.getp(ax))

    # fc = xr.plot.contourf(test_year_ens['diff'],row = 'month',col = 'scenario',levels = [0,0.05,2],hatches=['','.'],alpha = 0)

    # xr.plot.imshow(test_year_ens['diff'].isel(month = 0, scenario = 0))
    # xr.plot.contourf(test_year_ens['pvalue'].isel(month = 0, scenario = 0),levels = [0,0.05,0.10,2],hatches=['///','...',''],alpha = 0)
    # fc = xr.plot.imshow(test_year_ens['pvalue'].isel(month = 0, scenario = 0))
    # fc = xr.plot.contourf(test_year_ens['diff'].isel(month = 0, scenario = 0),levels = [0,0.05,2],hatches=['','.'],alpha = 0)


    # plt.savefig("foo.pdf", format = 'pdf', bbox_inches='tight')

    wks_type = "pdf"
    wks = Ngl.open_wks(wks_type,"foo.pdf")

    limits = {'valmin' : -0.7, 'valmax' : 0.7, 'spacing' : 0.1}

    plots = []
    for scen in test_year_ens.coords['scenario'].values:
        plots.append(plot_sig_test(test_year_ens.sel(scenario = scen).isel(month = 0),wks,res = Ngl.Resources(),interprate = 8, **limits))


    respanel = Ngl.Resources()
    respanel.nglPanelLabelBar = True

    Ngl.panel(wks,plots,[1,4],respanel)

    # Ngl.draw(plots[0])
    # Ngl.draw(plotcol)
    # Ngl.draw(plotsig)
    Ngl.frame(wks)

    Ngl.end()


# Plots a test xarray dataset generated by ttest, does not draw or frame
def plot_sig_test(testobj,wks,*args,**kwargs):

    res = kwargs.get('res',Ngl.Resources())
    interprate = kwargs.get('interprate',8)
    valmin = kwargs.get('valmin',None)
    valmax = kwargs.get('valmax',None)
    spacing = kwargs.get('spacing',None)

    var = testobj['diff']
    sig = testobj['pvalue']
    lat = var['lat']
    lon = var['lon']



    interplat = np.linspace(lat[0], lat[-1], lat.shape[0]*interprate)
    interplon = np.linspace(lon[0], lon[-1], lon.shape[0]*interprate)
    interpsig = sig.interp(lat = interplat, lon = interplon, method = 'nearest')
    # interpsig = sig.interp(lat = np.arange(min(lat),max(lat),0.25), lon = np.arange(min(lon),max(lon),0.25))

    if None in [valmin,valmax,spacing]:
        valmin = np.min(var.values)
        valmax = np.max(var.values)
        if np.sign(valmax) != np.sign(valmin):
            valmaxabs = max([abs(valmin),abs(valmax)])
            valmax = valmaxabs
            valmin = -valmaxabs
        spacing = (valmax - valmin)/10.0


    res.nglFrame               = False
    res.nglDraw                = False

    res.tmXBOn                 = False
    res.tmYLOn                 = False

    res.sfXArray               = lon.values
    res.sfYArray               = lat.values

    resmap                     = copy.deepcopy(res)
    resmap.mpLimitMode            = 'LatLon'
    resmap.mpMinLatF              = min(lat.values)
    resmap.mpMaxLatF              = max(lat.values)
    resmap.mpMinLonF              = min(lon.values)
    resmap.mpMaxLonF              = max(lon.values)

    resmap.mpDataSetName           = "Earth..4"
    resmap.mpOutlineSpecifiers     = ["Brazil"]

    resmap.mpGridAndLimbOn         = False

    # Resources specific to the color filling
    # rescol                         =   res
    rescol                         =   copy.deepcopy(res)


    rescol.cnFillPalette          = "BlueDarkRed18"
    rescol.cnFillOn               = True
    rescol.cnFillMode             = "RasterFill"

    rescol.cnLevelSelectionMode   = "ExplicitLevels"
    rescol.cnLevels               = np.arange(valmin,valmax,spacing)


    rescol.cnLinesOn              = False
    rescol.cnLineLabelsOn         = False
    # rescol.cnInfoLabelOn          = False
    # rescol.lbOrientation          = "Horizontal"

    rescol.lbLabelBarOn           = False

    ressig                        =   copy.deepcopy(res)
    ressig.cnFillOn               = True
    ressig.cnFillMode             = "AreaFill"
    ressig.cnLinesOn              = False
    ressig.cnLineLabelsOn         = False
    ressig.cnLevelSelectionMode   = "ExplicitLevels"
    ressig.cnLevels               = [0.05,0.10]

    ressig.cnMonoFillColor        = 1
    ressig.cnMonoFillPattern      = False
    ressig.cnFillPatterns         = [3,17,-1]

    ressig.lbLabelBarOn           = False

    ressig.sfXArray               = interpsig.lon.values
    ressig.sfYArray               = interpsig.lat.values




    plotmap = Ngl.map(wks,resmap)
    plotcol = Ngl.contour(wks,var.values,rescol)
    plotsig = Ngl.contour(wks,interpsig.values,ressig)

    Ngl.overlay(plotmap,plotcol)
    Ngl.overlay(plotmap,plotsig)
    return(plotmap)




def ttest(inparr1,inparr2,dims):
    # inparr1 = allp2
    # inparr2 = allp1
    # # dims = ['year','ensemble']
    # dims = 'year'

    if not isinstance(dims,list): dims = [dims]

    # A name for the stacked dimension to be tested along
    testdimname = 'testdim'

    arr1 = inparr1.stack({testdimname : dims})
    arr2 = inparr2.stack({testdimname : dims})

    diff = arr1.mean(**{'dim' : testdimname}) - arr2.mean(**{'dim' : testdimname})

    # TODO: See what can be done about aligning
    ind = arr1.dims.index(testdimname)
    test = scipy.stats.ttest_ind(arr1,arr2,axis = ind)
    results = xr.Dataset()
    results['diff'] = diff
    results['statistic'] = xr.DataArray(test.statistic, coords = arr1.isel({testdimname : 0}).coords)
    results['pvalue'] = xr.DataArray(test.pvalue, coords = arr1.isel({testdimname : 0}).coords)
    results = results.drop(testdimname)
    results.attrs['ttest_dims'] = 't-test made along dimensions: ' + ','.join(dims)
    return results


if __name__ == '__main__':
    main()
