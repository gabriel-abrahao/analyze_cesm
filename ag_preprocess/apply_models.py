# To add a new cell, type '# %%'
# To add a new markdown cell, type '# %% [markdown]'
# %%
from matplotlib import pyplot as plt
import numpy as np
import pandas as pd
import xarray as xr
import cftime
import tqdm
import os
import glob
import re
import copy
import datetime
import numba
from numba import jit,prange
import rpy2.robjects

# %% [markdown]
# ### Setup

# %%
# infolder = "../external/data/xavier/daily_all/"
baseinfolder = "../output_ag/dd_calc/"
baseoutfolder = "../output_ag/ag_vars/"

crops = ["single","maize"]

# calname = "ming595_mean"
calname = "Oct15-Mar1_Jan15-Jun15"

tempname = "temp"
tmaxname = "tmax"
tminname = "tmin"
precname = "prec"
vpdname = "vpd"

# calfolder = "fixed_calendars/"+calname+"/"
basecalfolder = baseinfolder + calname + "/"

# scens       =   next(os.walk(basecalfolder))[1]

fscens      =   ["rcp8.5_seg", "rcp8.5_weg", "rcp8.5_cmp", "rcp2.6_seg", "rcp2.6_weg", "rcp2.6_cmp"]
hscen       =   "historical"

allscens    =   [i for i in fscens]
allscens.append(hscen)

enscodes    =   ["005","006", "008", "009"]

fsyear = 2035
feyear = 2050
hsyear = 1991
heyear = 2005

# Dirty override of the scenario counter, can be used to restart runs
ioverscen = False
# ioverscen = True
overscenindex = 2
if ioverscen:
    print("====================================================\n===== WARNING: Skipping to scenario index " + str(overscenindex) + " ========\n====================================================")

#%% Function definitions    ===============================================================

# Reads a R model coefficient table from an RDS file containing model fit variables
# as generated by climate-soybeans
# fname = "/media/gabriel/hd1_6tb/backup/gabriel/transicao/doutorado/climate-soybeans/models/fixed_calendar/model.ming595_yearly_fill.xavier.single.2.rds"
# modname = "fit.anom.gddedd"
def read_R_model_table(fname,modname):
    if "rpy2.robjects" not in sys.modules:
        raise NameError("Remember to import rpy2.robjects")
    R = rpy2.robjects.r

    models = R.readRDS(fname)

    model = models.rx2[modname]
    smodel = R.summary(model)

    rcoeftable = smodel.rx2["coefficients"]
    rtermnames = R.rownames(rcoeftable)
    rcolnames = R.colnames(rcoeftable)

    coefsdf = pd.DataFrame(np.asarray(rcoeftable))
    coefsdf.index = rtermnames
    coefsdf.columns = rcolnames

    return(coefsdf)

# Opens a dataset and adds scenario and member dimensions with metadata
def meta_open_dataset(fname,scen,enscode):
    ds = xr.open_dataset(fname)
    ds = ds.assign_coords({
        "year":ds.attrs["harvest_year"],
        "scenario" : scen,
        "member" : enscode
        }).expand_dims(["year","scenario","member"])
    return(ds)

# Opens a dataset concatenating all files in an ensemble member's folder,
# adding scenario and member metadata
def dataset_open_ens_folder(basecalfolder, enscode, scen, crop):
    ensfolder = basecalfolder + scen + "_" + enscode + "/"
    listensds = [meta_open_dataset(fname,scen,enscode) for fname in glob.glob(ensfolder + "/" + crop + ".*.nc")]
    ensds = xr.combine_nested(listensds, concat_dim=["year"])
    ensds = ensds.sortby("year")
    return(ensds)

# Adds a suffix to all variables in a Dataset
def add_suf(ds,suf):
    return(ds.rename({i:(i + suf) for i in ds.data_vars}))

# Removes a suffix from all variables in a Dataset
def rem_suf(ds,suf):
    return(ds.rename({i:(re.sub("(.*)"+suf+"$","\g<1>",i)) for i in ds.data_vars}))

# Splits a dataset that has means and variances coded by name. 
# e.g. the mean of variable X is in variable X and it's variance is in X_val
def split_dataset_variances(dsboth):
    regexvar = re.compile(".*_var$")
    dsmeans = dsboth[[i for i in dsboth.data_vars if not regexvar.match(i)]]
    dsvariances = dsboth[[i for i in dsboth.data_vars if regexvar.match(i)]]
    dsvariances = dsvariances.rename({i:(re.sub("(.*)_var$","\g<1>",i)) for i in dsvariances.data_vars})

    # Using slice like this here ensures lev is kept as a singleton dimension
    # dsmeans = dsmeans[selvars].sel(lev=slice(uselev,uselev))
    # dsvariances = dsvariances[selvars].sel(lev=slice(uselev,uselev))
    return((dsmeans, dsvariances))

# Calculates mean and variances of all variables in a Dataset, 
# appending "_var" to the variance's variable names
def calc_ds_mean_and_var(allinds, dims = ["year","member"]):
    # Means and variances in separate Datasets
    meaninds = allinds.mean(keep_attrs = True, dim = dims)
    varinds = allinds.var(keep_attrs = True, ddof = 1, dim = dims)
    varinds = add_suf(varinds, "_var")

    # Combine and add number of observations
    alloutds = xr.merge([meaninds,varinds])
    alloutds.attrs['nobs_var'] = np.prod([len(allinds[d]) for d in dims])
    return(alloutds)

# Converts specified units from a Dataarray, using an optional exponent for higher moments (e.g. variances)
# We're not enforcing unit names here, just converting select ones
# For example, Pa/s and Pa s-1 won't be made the same
def convert_units(da, exponent = 1):
    if da.attrs['units'] == "kg m-2 s-1":
        # Convert from kg m-2 s-1 to m/s
        # da.values = da.values/1000
        da.values = da.values*(0.001**exponent)
        da.attrs['units'] = "m/s"
    else:
        da = da
    return(da)

#%% ============================ MAIN SCRIPT
# == CROPS LOOP
crop = crops[0]

# Open all future and historical data in separate big datasets
# listallds = [[dataset_open_ens_folder(basecalfolder, enscode, scen, crop) for scen in allscens] for enscode in enscodes]
flistallds = [[dataset_open_ens_folder(basecalfolder, enscode, scen, crop) for scen in fscens] for enscode in enscodes]
fbiginds = xr.combine_nested(flistallds, concat_dim=["member","scenario"])

hlistallds = [[dataset_open_ens_folder(basecalfolder, enscode, scen, crop) for scen in [hscen]] for enscode in enscodes]
hbiginds = xr.combine_nested(hlistallds, concat_dim=["member","scenario"])

# hbiginds["tempgdds"].sel(tmp = basevaledd).isel(member=0,year = 0).plot()



# Selecting years
hbiginds = hbiginds.sel(scenario = hscen,  year = slice(hsyear,heyear))
fbiginds = fbiginds.sel(scenario = fscens, year = slice(fsyear,feyear))

# Calculate means and variances
hmvds = calc_ds_mean_and_var(hbiginds, dims=["year","member"])
fmvds = calc_ds_mean_and_var(fbiginds, dims=["year","member"])

#%%
inds = hbiginds 
basevalgdd = 10.0
basevaledd = 30.0

inds["edd"] = inds["tempgdds"].sel(tmp = basevaledd)
inds["gdd"] = inds["tempgdds"].sel(tmp = basevalgdd) - inds["tempgdds"].sel(tmp = basevaledd)

inds["edd"].attrs["basevaledd"] = basevaledd
inds["gdd"].attrs["basevalgdd"] = basevalgdd


# %%
hlistallds = [[dataset_open_ens_folder(basecalfolder, enscode, scen, crop) for scen in [hscen]] for enscode in enscodes]
hbiginds = xr.combine_nested(hlistallds, concat_dim=["member","scenario"])

# hbiginds["tempgdds"].sel(tmp = basevaledd).isel(member=0,year = -1).plot()
# hbiginds["tempgdds"].sel(tmp = basevaledd).isel(member=0).plot(row='year')


hlistallds[0][0]["tempmean"].plot(row="year")
#%%
subscens = [
    # 'rcp8.5_seg',
    # 'rcp8.5_weg',
    'rcp8.5_cmp',
    'rcp2.6_cmp'
    # 'rcp2.6_seg',
    # 'rcp2.6_weg'
]
flistallds = [[dataset_open_ens_folder(basecalfolder, enscode, scen, crop) for scen in subscens] for enscode in enscodes]
fbiginds = xr.combine_nested(flistallds, concat_dim=["member","scenario"])

#%%
flistallds[0][0]["tempmean"].plot(row="year")

fbiginds.isel(member=0, year=3)["tempmean"].plot(row="scenario")

#%%
inds = dataset_open_ens_folder(basecalfolder, "005", "historical", crop)
# inds = inds.sortby("year")
inds["tempmean"].isel(member=0).plot(row='year')


# %%
